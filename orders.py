import sqlite3
import re
import os
from datetime import datetime
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ConversationHandler, ContextTypes, filters
)

# --- –ö–û–ù–§–Ü–ì ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS = [893509708]  # —Å–ø–∏—Å–æ–∫ ID –∞–¥–º—ñ–Ω—ñ–≤

NAME, PHONE, FROM, TO, DATE, WEIGHT = range(6)

# --- –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ë–î ---
def init_db():
    conn = sqlite3.connect("orders.db")
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT,
            phone TEXT,
            from_address TEXT,
            to_address TEXT,
            date TEXT,
            weight TEXT,
            status TEXT DEFAULT '–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ',
            user_id INTEGER
        )
    ''')
    conn.commit()
    conn.close()

# --- –ü–û–ß–ê–¢–û–ö –ó–ê–ú–û–í–õ–ï–ù–ù–Ø ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–æ–±—Ä–∏–π –¥–µ–Ω—å! –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º‚Äô—è:", reply_markup=back_button())
    return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if is_back(update):
        return await cancel_dialog(update, context)
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:", reply_markup=back_button())
    return PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if is_back(update):
        return NAME
    phone = update.message.text
    if not re.match(r"^\+?[\d\s\-]{10,15}$", phone):
        await update.message.reply_text("‚ùó –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:", reply_markup=back_button())
        return PHONE
    context.user_data["phone"] = phone
    await update.message.reply_text("–ó–≤—ñ–¥–∫–∏ –∑–∞–±—Ä–∞—Ç–∏ –ø–æ—Å–∏–ª–∫—É?", reply_markup=back_button())
    return FROM

async def get_from(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if is_back(update):
        return PHONE
    context.user_data["from"] = update.message.text
    await update.message.reply_text("–ö—É–¥–∏ –¥–æ—Å—Ç–∞–≤–∏—Ç–∏ –ø–æ—Å–∏–ª–∫—É?", reply_markup=back_button())
    return TO

async def get_to(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if is_back(update):
        return FROM
    context.user_data["to"] = update.message.text
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ (–î–î.–ú–ú.–†–†–†–†):", reply_markup=back_button())
    return DATE

async def get_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if is_back(update):
        return TO
    date_input = update.message.text
    try:
        datetime.strptime(date_input, "%d.%m.%Y")
        context.user_data["date"] = date_input
    except ValueError:
        await update.message.reply_text("‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–†:", reply_markup=back_button())
        return DATE
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –º–∞—Å—É –ø–æ—Å–∏–ª–∫–∏ –≤ –∫–≥:", reply_markup=back_button())
    return WEIGHT

async def get_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if is_back(update):
        return DATE
    try:
        weight = float(update.message.text)
        if weight <= 0:
            raise ValueError
        context.user_data["weight"] = str(weight)
    except ValueError:
        await update.message.reply_text("‚ùó –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –º–∞—Å—É (—á–∏—Å–ª–æ > 0):", reply_markup=back_button())
        return WEIGHT

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è
    conn = sqlite3.connect("orders.db")
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO orders (name, phone, from_address, to_address, date, weight, user_id)
        VALUES (?, ?, ?, ?, ?, ?, ?)
    ''', (
        context.user_data["name"], context.user_data["phone"],
        context.user_data["from"], context.user_data["to"],
        context.user_data["date"], context.user_data["weight"],
        update.effective_user.id
    ))
    order_id = cursor.lastrowid
    conn.commit()
    conn.close()

    await update.message.reply_text("‚úÖ –î—è–∫—É—î–º–æ! –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ.")

    # –ê–¥–º—ñ–Ω–∞–º
    keyboard = InlineKeyboardMarkup([[
        InlineKeyboardButton("‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ", callback_data=f"done:{order_id}"),
        InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"cancel:{order_id}")
    ]])
    text = (
        f"üì¶ *–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order_id}*\n"
        f"üë§ –Ü–º‚Äô—è: {context.user_data['name']}\n"
        f"üìû –¢–µ–ª: {context.user_data['phone']}\n"
        f"üöö {context.user_data['from']} ‚Üí {context.user_data['to']}\n"
        f"üóìÔ∏è –î–∞—Ç–∞: {context.user_data['date']}\n"
        f"‚öñÔ∏è –ú–∞—Å–∞: {context.user_data['weight']} –∫–≥\n"
        f"–°—Ç–∞—Ç—É—Å: –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ"
    )
    for admin_id in ADMIN_IDS:
        await context.bot.send_message(chat_id=admin_id, text=text, parse_mode="Markdown", reply_markup=keyboard)

    return ConversationHandler.END

# --- –î–û–î–ê–¢–ö–û–í–Ü –•–ï–õ–ü–ï–†–ò ---
def back_button():
    return ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True, one_time_keyboard=True)

def is_back(update: Update):
    return update.message.text.strip().lower() in ["–Ω–∞–∑–∞–¥", "üîô –Ω–∞–∑–∞–¥"]

# --- –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø –ö–õ–Ü–Ñ–ù–¢–£ –ü–†–ò –ó–ú–Ü–ù–Ü –°–¢–ê–¢–£–°–£ ---
async def notify_user(order_id: int, status: str, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect("orders.db")
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM orders WHERE id = ?", (order_id,))
    row = cursor.fetchone()
    conn.close()
    if row and row[0]:
        try:
            await context.bot.send_message(chat_id=row[0], text=f"‚ÑπÔ∏è –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order_id} {status}.")
        except:
            pass

# --- –ü–û–®–£–ö –ó–ê–ú–û–í–õ–ï–ù–¨ ---
async def find(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        return await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
    if not context.args:
        return await update.message.reply_text("‚ùó –í–≤–µ–¥—ñ—Ç—å —á–∞—Å—Ç–∏–Ω—É —ñ–º–µ–Ω—ñ –∞–±–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: /find 093")
    keyword = ' '.join(context.args)
    conn = sqlite3.connect("orders.db")
    cursor = conn.cursor()
    cursor.execute("SELECT id, name, phone, date, status FROM orders WHERE name LIKE ? OR phone LIKE ?", (f"%{keyword}%", f"%{keyword}%"))
    rows = cursor.fetchall()
    conn.close()
    if not rows:
        return await update.message.reply_text("üîç –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    text = "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É:\n\n"
    for row in rows:
        text += f"#{row[0]} | {row[1]} | {row[2]} | {row[3]} | –°—Ç–∞—Ç—É—Å: {row[4]}\n"
    await update.message.reply_text(text)

# --- –°–¢–ê–¢–ò–°–¢–ò–ö–ê ---
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        return await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
    conn = sqlite3.connect("orders.db")
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM orders")
    total = cursor.fetchone()[0]
    cursor.execute("SELECT COUNT(*) FROM orders WHERE status = '–≤–∏–∫–æ–Ω–∞–Ω–æ'")
    done = cursor.fetchone()[0]
    cursor.execute("SELECT COUNT(*) FROM orders WHERE status = '—Å–∫–∞—Å–æ–≤–∞–Ω–æ'")
    canceled = cursor.fetchone()[0]
    cursor.execute("SELECT COUNT(*) FROM orders WHERE status = '–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ'")
    pending = cursor.fetchone()[0]
    conn.close()
    await update.message.reply_text(f"üìä –í—Å—å–æ–≥–æ: {total}\n‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ: {done}\n‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ: {canceled}\nüì¶ –ù–µ –≤–∏–∫–æ–Ω–∞–Ω–æ: {pending}")
### [–í–µ—Å—å –æ—Å–Ω–æ–≤–Ω–∏–π –∫–æ–¥ –∑–∞–ª–∏—à–µ–Ω–æ –±–µ–∑ –∑–º—ñ–Ω –≤–∏—â–µ ‚Äî –¥–æ–¥–∞—î—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è]

# --- –û–ë–†–û–ë–ö–ê –ö–ù–û–ü–û–ö ---
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if update.effective_user.id not in ADMIN_IDS:
        await query.edit_message_text("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤.")
        return

    data = query.data
    if data.startswith("done:"):
        order_id = int(data.split(":")[1])
        await update_status(order_id, "–≤–∏–∫–æ–Ω–∞–Ω–æ", context)
        await query.edit_message_text(f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order_id} –≤–∏–∫–æ–Ω–∞–Ω–æ.")
    elif data.startswith("cancel:"):
        order_id = int(data.split(":")[1])
        await update_status(order_id, "—Å–∫–∞—Å–æ–≤–∞–Ω–æ", context)
        await query.edit_message_text(f"‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order_id} —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")

# --- –û–ù–û–í–õ–ï–ù–ù–Ø –°–¢–ê–¢–£–°–£ ---
async def update_status(order_id: int, new_status: str, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect("orders.db")
    cursor = conn.cursor()
    cursor.execute("UPDATE orders SET status = ? WHERE id = ?", (new_status, order_id))
    conn.commit()
    conn.close()
    await notify_user(order_id, new_status, context)

# --- –°–ö–ê–°–£–í–ê–ù–ù–Ø –î–Ü–ê–õ–û–ì–£ ---
async def cancel_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –ü—Ä–æ—Ü–µ—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# --- –°–ü–ò–°–û–ö –ù–ï–í–ò–ö–û–ù–ê–ù–ò–• –ó–ê–ú–û–í–õ–ï–ù–¨ ---
async def list_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        return await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")

    conn = sqlite3.connect("orders.db")
    cursor = conn.cursor()
    cursor.execute("SELECT id, name, phone, from_address, to_address, date, weight FROM orders WHERE status = '–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ'")
    rows = cursor.fetchall()
    conn.close()

    if not rows:
        return await update.message.reply_text("‚úÖ –ù–µ–º–∞—î –Ω–µ–≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å.")

    text = "üìã *–ù–µ–≤–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:*\n\n"
    for row in rows:
        text += (
            f"üÜî ID: {row[0]}\n"
            f"üë§ –Ü–º‚Äô—è: {row[1]}\n"
            f"üìû –¢–µ–ª: {row[2]}\n"
            f"üöö {row[3]} ‚Üí {row[4]}\n"
            f"üóìÔ∏è –î–∞—Ç–∞: {row[5]}\n"
            f"‚öñÔ∏è –ú–∞—Å–∞: {row[6]} –∫–≥\n"
            f"{'-'*30}\n"
        )
    await update.message.reply_text(text, parse_mode="Markdown")

# --- –ü–û–ó–ù–ê–ß–ò–¢–ò –Ø–ö –í–ò–ö–û–ù–ê–ù–û ---
async def mark_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        return await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤.")
    if not context.args:
        return await update.message.reply_text("‚ùó –í–∫–∞–∂—ñ—Ç—å ID: /done 0")
    try:
        order_id = int(context.args[0])
        await update_status(order_id, "–≤–∏–∫–æ–Ω–∞–Ω–æ", context)
        await update.message.reply_text(f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order_id} –≤–∏–∫–æ–Ω–∞–Ω–æ.")
    except:
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —É –≤–≤–µ–¥–µ–Ω–Ω—ñ ID.")

# --- –°–ö–ê–°–£–í–ê–¢–ò –ó–ê–ú–û–í–õ–ï–ù–ù–Ø ---
async def cancel_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        return await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤.")
    if not context.args:
        return await update.message.reply_text("‚ùó –í–∫–∞–∂—ñ—Ç—å ID: /cancel_order 0")
    try:
        order_id = int(context.args[0])
        await update_status(order_id, "—Å–∫–∞—Å–æ–≤–∞–Ω–æ", context)
        await update.message.reply_text(f"‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order_id} —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    except:
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —É –≤–≤–µ–¥–µ–Ω–Ω—ñ ID.")

# --- MAIN ---
if __name__ == '__main__':
    init_db()
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            FROM: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_from)],
            TO: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_to)],
            DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_date)],
            WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_weight)],
        },
        fallbacks=[CommandHandler("cancel", cancel_dialog)]
    )

    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(handle_buttons))
    app.add_handler(CommandHandler("find", find))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("orders", list_orders))
    app.add_handler(CommandHandler("done", mark_done))
    app.add_handler(CommandHandler("cancel_order", cancel_order))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")

import threading
from http.server import BaseHTTPRequestHandler, HTTPServer

class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"OK")

def run_health_server():
    server = HTTPServer(("0.0.0.0", 8000), HealthHandler)
    server.serve_forever()

threading.Thread(target=run_health_server, daemon=True).start()

app.run_polling()
